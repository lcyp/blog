"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[130],{6262:(e,t)=>{t.A=(e,t)=>{const a=e.__vccOpts||e;for(const[e,o]of t)a[e]=o;return a}},3840:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>i,data:()=>n});var o=a(641);const c={},i=(0,a(6262).A)(c,[["render",function(e,t){return(0,o.uX)(),(0,o.CE)("div",null,t[0]||(t[0]=[(0,o.Fv)('<h1 id="jvm的生命周期" tabindex="-1"><a class="header-anchor" href="#jvm的生命周期"><span>JVM的生命周期</span></a></h1><h2 id="jvm的生命周期-1" tabindex="-1"><a class="header-anchor" href="#jvm的生命周期-1"><span>JVM的生命周期</span></a></h2><p>一个运行时的java虚拟机实例的天职就是运行一个java程序。</p><ol><li>JVM实例的诞生<br> 当一个程序启动，伴随的就是一个jvm实例的诞生，当这个程序关闭退出，这个jvm实例就随之消亡。如果在同一台机器上运行多个程序，将诞生相应数量的jvm实例，每个程序都有一个与之对应的jvm实例供其运行。任何一个拥有公开的（public）、静态的（static）、没有返回值（void）并且接受一个字符串数组参数（String[] args） 的main()函数的class都可以作为JVM实例运行的起点 。</li><li>JVM实例的运行<br><code>main()</code>作为该程序初始线程的起点，任何其他线程均由该线程启动。JVM内部有两种线程：<code>守护线程</code>和<code>非守护线程</code>，<code>main()</code>属于<code>非守护线程</code>，<code>守护线程</code>通常由JVM自己使用，java程序也可以标明自己创建的线程是守护线程。java程序的初始线程只就是运行main（）的线程，这个线程是非守护线程，只要还有任何非守护线程还在运行，那么jvm就存活着。</li><li>JVM实例的消亡<br> 当程序中的所有<code>非守护线程</code>都<code>终止</code>时，JVM才退出；若安全管理器允许，程序也可以使用java.lang.Runtime类或者java.lang.System.exit()来退出。</li></ol>',4)]))}]]),n=JSON.parse('{"path":"/zh/posts/%E9%9D%A2%E8%AF%95%E6%B1%82%E8%81%8C/JVM/1.html","title":"JVM的生命周期","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-05T00:00:00.000Z","comment":true,"category":["JVM"],"tag":["jvm的生命周期"],"description":"JVM的生命周期 JVM的生命周期 一个运行时的java虚拟机实例的天职就是运行一个java程序。 JVM实例的诞生 当一个程序启动，伴随的就是一个jvm实例的诞生，当这个程序关闭退出，这个jvm实例就随之消亡。如果在同一台机器上运行多个程序，将诞生相应数量的jvm实例，每个程序都有一个与之对应的jvm实例供其运行。任何一个拥有公开的（public）、...","head":[["meta",{"property":"og:url","content":"https://lcyp.github.io/blog/zh/blog/zh/posts/%E9%9D%A2%E8%AF%95%E6%B1%82%E8%81%8C/JVM/1.html"}],["meta",{"property":"og:site_name","content":"𝖑𝖎𝖆𝖓𝖌𝖈𝖍𝖊𝖓𝖞𝖆𝖓𝖌\'𝖘 𝖇𝖑𝖔𝖌"}],["meta",{"property":"og:title","content":"JVM的生命周期"}],["meta",{"property":"og:description","content":"JVM的生命周期 JVM的生命周期 一个运行时的java虚拟机实例的天职就是运行一个java程序。 JVM实例的诞生 当一个程序启动，伴随的就是一个jvm实例的诞生，当这个程序关闭退出，这个jvm实例就随之消亡。如果在同一台机器上运行多个程序，将诞生相应数量的jvm实例，每个程序都有一个与之对应的jvm实例供其运行。任何一个拥有公开的（public）、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T14:19:56.000Z"}],["meta",{"property":"article:tag","content":"jvm的生命周期"}],["meta",{"property":"article:published_time","content":"2022-01-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T14:19:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM的生命周期\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-30T14:19:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"梁晨阳\\",\\"url\\":\\"https://lcyp.github.io/blog/zh/\\"}]}"]]},"headers":[{"level":2,"title":"JVM的生命周期","slug":"jvm的生命周期-1","link":"#jvm的生命周期-1","children":[]}],"git":{"createdTime":1731560569000,"updatedTime":1732976396000,"contributors":[{"name":"lcy","email":"2089117474@qq.com","commits":2}]},"readingTime":{"minutes":1.3,"words":391},"filePathRelative":"zh/posts/面试求职/JVM/1.md","localizedDate":"2022年1月5日","excerpt":"\\n<h2>JVM的生命周期</h2>\\n<p>一个运行时的java虚拟机实例的天职就是运行一个java程序。</p>\\n<ol>\\n<li>JVM实例的诞生<br>\\n当一个程序启动，伴随的就是一个jvm实例的诞生，当这个程序关闭退出，这个jvm实例就随之消亡。如果在同一台机器上运行多个程序，将诞生相应数量的jvm实例，每个程序都有一个与之对应的jvm实例供其运行。任何一个拥有公开的（public）、静态的（static）、没有返回值（void）并且接受一个字符串数组参数（String[] args） 的main()函数的class都可以作为JVM实例运行的起点 。</li>\\n<li>JVM实例的运行<br>\\n<code>main()</code>作为该程序初始线程的起点，任何其他线程均由该线程启动。JVM内部有两种线程：<code>守护线程</code>和<code>非守护线程</code>，<code>main()</code>属于<code>非守护线程</code>，<code>守护线程</code>通常由JVM自己使用，java程序也可以标明自己创建的线程是守护线程。java程序的初始线程只就是运行main（）的线程，这个线程是非守护线程，只要还有任何非守护线程还在运行，那么jvm就存活着。</li>\\n<li>JVM实例的消亡<br>\\n当程序中的所有<code>非守护线程</code>都<code>终止</code>时，JVM才退出；若安全管理器允许，程序也可以使用java.lang.Runtime类或者java.lang.System.exit()来退出。</li>\\n</ol>","autoDesc":true}')}}]);