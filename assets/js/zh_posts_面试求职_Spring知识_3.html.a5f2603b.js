"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[245],{6262:(e,t)=>{t.A=(e,t)=>{const o=e.__vccOpts||e;for(const[e,r]of t)o[e]=r;return o}},3035:(e,t,o)=>{o.r(t),o.d(t,{comp:()=>n,data:()=>p});var r=o(641);const i={},n=(0,o(6262).A)(i,[["render",function(e,t){return(0,r.uX)(),(0,r.CE)("div",null,[t[0]||(t[0]=(0,r.Lk)("p",null,"IOC",-1)),(0,r.Q3)(" more "),t[1]||(t[1]=(0,r.Fv)('<h1 id="ioc" tabindex="-1"><a class="header-anchor" href="#ioc"><span>IOC</span></a></h1><p><strong>IoC</strong> 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过，IoC 并非 Spring 特有，在其他语言中也有应用。</p><h2 id="为什么叫控制反转" tabindex="-1"><a class="header-anchor" href="#为什么叫控制反转"><span>为什么叫控制反转？</span></a></h2><ul><li><strong>控制</strong>：指的是对象创建（实例化、管理）的权力。</li><li><strong>反转</strong>：控制权交给外部环境（Spring 框架、IoC 容器）。</li></ul><p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。</p><p>在实际项目中，一个 Service 类可能依赖了很多其他的类，假如我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IoC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。</p><h2 id="ioc-容器在-spring-中的实现" tabindex="-1"><a class="header-anchor" href="#ioc-容器在-spring-中的实现"><span>IoC 容器在 Spring 中的实现</span></a></h2><p>在 Spring 中，IoC 容器是 Spring 用来实现 IoC 的载体，IoC 容器实际上就是个 <code>Map</code>（key，value），Map 中存放的是各种对象。</p><ul><li>在 Spring 时代，我们一般通过 XML 文件来配置 Bean。</li><li>后来开发人员觉得 XML 文件来配置不太好，于是 Spring Boot 注解配置就慢慢开始流行起来。</li></ul>',9))])}]]),p=JSON.parse('{"path":"/zh/posts/%E9%9D%A2%E8%AF%95%E6%B1%82%E8%81%8C/Spring%E7%9F%A5%E8%AF%86/3.html","title":"IOC","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-03T00:00:00.000Z","category":["Spring知识"],"tag":["Spring","IOC"],"description":"IOC","head":[["meta",{"property":"og:url","content":"https://lcyp.github.io/blog/zh/blog/zh/posts/%E9%9D%A2%E8%AF%95%E6%B1%82%E8%81%8C/Spring%E7%9F%A5%E8%AF%86/3.html"}],["meta",{"property":"og:site_name","content":"𝖑𝖎𝖆𝖓𝖌𝖈𝖍𝖊𝖓𝖞𝖆𝖓𝖌\'𝖘 𝖇𝖑𝖔𝖌"}],["meta",{"property":"og:title","content":"IOC"}],["meta",{"property":"og:description","content":"IOC"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-02T06:55:48.000Z"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"IOC"}],["meta",{"property":"article:published_time","content":"2022-01-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-02T06:55:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IOC\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-03T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-02T06:55:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"梁晨阳\\",\\"url\\":\\"https://lcyp.github.io/blog/zh/\\"}]}"]]},"headers":[{"level":2,"title":"为什么叫控制反转？","slug":"为什么叫控制反转","link":"#为什么叫控制反转","children":[]},{"level":2,"title":"IoC 容器在 Spring 中的实现","slug":"ioc-容器在-spring-中的实现","link":"#ioc-容器在-spring-中的实现","children":[]}],"git":{"createdTime":1731560569000,"updatedTime":1735800948000,"contributors":[{"name":"lcy","email":"2089117474@qq.com","commits":2},{"name":"lcyp","email":"2089117474@qq.com","commits":1}]},"readingTime":{"minutes":1.54,"words":461},"filePathRelative":"zh/posts/面试求职/Spring知识/3.md","localizedDate":"2022年1月3日","excerpt":"<p>IOC</p>\\n","autoDesc":true}')}}]);