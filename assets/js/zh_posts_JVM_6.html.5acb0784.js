"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[4887],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},6812:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>T,data:()=>U});var e=a(641);const n=a.p+"assets/img/image-167.06c5547e.png",t=a.p+"assets/img/image-168.0803f23a.png",l=a.p+"assets/img/image-169.85d6762f.png",p=a.p+"assets/img/image-170.b4b46c9b.png",h=a.p+"assets/img/image-171.ab4fb8f2.png",r=a.p+"assets/img/image-172.c44faf1d.png",g=a.p+"assets/img/image-173.ee9a7d68.png",k=a.p+"assets/img/image-174.66b46c72.png",d=a.p+"assets/img/image-175.4da24f97.png",c=a.p+"assets/img/image-176.dbd14fec.png",o=a.p+"assets/img/image-177.7fb099e7.png",m=a.p+"assets/img/image-178.82315a04.png",u=a.p+"assets/img/image-179.798fddca.png",y=a.p+"assets/img/image-180.9d84e94e.png",C=a.p+"assets/img/image-181.beb0bac9.png",A=a.p+"assets/img/image-182.fc79a8dc.png",f=a.p+"assets/img/image-183.c638f87f.png",v=a.p+"assets/img/image-184.fe4c98b1.png",b=a.p+"assets/img/image-185.6603bae7.png",B=a.p+"assets/img/image-186.f0acca5d.png",x=a.p+"assets/img/image-187.18d65706.png",G=a.p+"assets/img/image-188.6c141ed9.png",F=a.p+"assets/img/image-189.16219117.png",E=a.p+"assets/img/image-190.81e8bd54.png",D=a.p+"assets/img/image-191.e64bea43.png",X=a.p+"assets/img/image-192.db3d5f32.png",M=a.p+"assets/img/image-193.c9817fee.png",j=a.p+"assets/img/image-194.eff9c503.png",z=a.p+"assets/img/image-195.5840d4ce.png",J=a.p+"assets/img/image-196.75015e52.png",P=a.p+"assets/img/image-197.ba7df0d4.png",w=a.p+"assets/img/image-198.31b86de4.png",V=a.p+"assets/img/image-199.c8df04e7.png",S=a.p+"assets/img/image-200.15f26076.png",L=a.p+"assets/img/image-201.f6f0aa1a.png",O={},T=(0,a(6262).A)(O,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,[s[0]||(s[0]=(0,e.Lk)("p",null,"Java虚拟机的GC调优",-1)),(0,e.Q3)(" more "),s[1]||(s[1]=(0,e.Fv)('<h2 id="gc调优" tabindex="-1"><a class="header-anchor" href="#gc调优"><span>GC调优</span></a></h2><p>GC调优指的是对垃圾回收（Garbage Collection）进行调优。GC调优的主要目标是避免由<strong>垃圾回收</strong>引起程序性能下降。</p><p>GC调优的核心分成三部分：</p><p>1、通用Jvm参数的设置。</p><p>2、特定垃圾回收器的Jvm参数的设置。</p><p>3、解决由频繁的FULLGC引起的程序性能问题。</p><p>GC调优没有没有唯一的标准答案，如何调优与硬件、程序本身、使用情况均有关系，重点学习调优的工具和方法。</p><h2 id="gc调优的核心指标" tabindex="-1"><a class="header-anchor" href="#gc调优的核心指标"><span>GC调优的核心指标</span></a></h2><p><strong>1.吞吐量(Throughput) 吞吐量分为业务吞吐量和垃圾回收吞吐量</strong></p><p><strong>业务吞吐量</strong></p><p>业务吞吐量指的在一段时间内，程序需要完成的业务数量。比如企业中对于吞吐量的要求可能会是这样的：</p><p>⚫ 支持用户每天生成10000笔订单</p><p>⚫ 在晚上8点到10点，支持用户查询50000条商品信息</p><p><strong>垃圾回收吞吐量</strong></p><p>垃圾回收吞吐量指的是 CPU 用于执行用户代码的时间与 CPU 总执行时间的比值，即吞吐量 = 执行用户代</p><p>码时间 /（执行用户代码时间 + GC时间）。吞吐量数值越高，垃圾回收的效率就越高，允许更多的CPU时</p><p>间去处理用户的业务，相应的业务吞吐量也就越高。</p><figure><img src="'+n+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>保证高吞吐量的常规手段有两条：</p><p>1、优化业务执行性能，减少单次业务的执行时间</p><p>2、优化垃圾回收吞吐量</p><p><strong>2. 延迟（Latency）</strong></p><p>延迟指的是从用户发起一个请求到收到响应这其中经历的时间。</p><p>比如企业中对于延迟的要求可能会是这样的：</p><p>所有的请求必须在5秒内返回给用户结果 。</p><p>延迟 = GC延迟 + 业务执行时间，所以如果GC时间过长，会影响到用户的使用。</p><p><img src="'+t+'" alt="alt text" loading="lazy"><img src="'+l+'" alt="alt text" loading="lazy"><img src="'+p+'" alt="alt text" loading="lazy"></p><p><strong>3. 内存使用量</strong></p><p>内存使用量指的是Java应用占用系统内存的最大值，一般通过Jvm参数调整，在满足上述两个指标的前提下，</p><p>这个值越小越好。</p><figure><img src="'+h+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h2 id="gc调优的步骤" tabindex="-1"><a class="header-anchor" href="#gc调优的步骤"><span>GC调优的步骤：</span></a></h2><p><strong>发现问题</strong>：通过监控工具尽可能早的发现GC时间过长，频率过高的现象</p><p><strong>诊断问题</strong>：通过分析工具，诊断问题产生的原因</p><p><strong>修复问题</strong>：调整JVM参数或者修复源代码中的问题</p><p><strong>测试验证</strong>：在测试环境运行之后获得GC数据，验证问题是否解决</p><h2 id="gc调优的常用工具" tabindex="-1"><a class="header-anchor" href="#gc调优的常用工具"><span>GC调优的常用工具：</span></a></h2><h3 id="jstat工具" tabindex="-1"><a class="header-anchor" href="#jstat工具"><span>Jstat工具</span></a></h3><p>Jstat工具是JDK自带的一款监控工具，可以提供各种垃圾回收、类加载、编译信息等不同的数据。</p><p>使用方法为：jstat -gc 进程ID 每次统计的间隔（毫秒） 统计次数</p><p>例如：</p><figure><img src="'+r+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>⚫ C代表Capacity容量，U代表Used使用量</p><p>⚫ S – 幸存者区，E – 伊甸园区，O – 老年代，M – 元空间</p><p>⚫ YGC、YGT：年轻代GC次数和GC耗时（单位：秒）</p><p>⚫ FGC、FGCT：Full GC次数和Full GC耗时</p><p>⚫ GCT：GC总耗时</p><p>优点：操作简单，无额外的软件安装</p><p>缺点：无法精确到GC产生的时间，只能用于判断GC是否存在问题</p><h3 id="visualvm" tabindex="-1"><a class="header-anchor" href="#visualvm"><span>VisualVm</span></a></h3><p>VisualVm中提供了一款Visual Tool插件，实时监控Java进程的堆内存结构、 堆内存变化趋势以及垃圾回收时间的变化趋势。同时还可以监控对象晋升的直方图。</p><p>安装VisualGC插件：</p><figure><img src="'+g+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><figure><img src="'+k+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>优点：适合开发使用，能直观的看到堆内存和GC的变化趋势</p><p>缺点：对程序运行性能有一定影响，生产环境程序员一般没有权限进行操作</p><h3 id="prometheus-grafana" tabindex="-1"><a class="header-anchor" href="#prometheus-grafana"><span>Prometheus+Grafana</span></a></h3><p>Prometheus+Grafana是企业中运维常用的监控方案，其中Prometheus用来采集系统或者应用的相关数据，同时具备告警功能。Grafana可以将Prometheus采集 到的数据以可视化的方式进行展示。</p><p>Java程序员要学会如何读懂Grafana展示的Java虚拟机相关的参数。</p><p>优点：</p><p>支持系统级别和应用级别的监 控，比如linux操作系统、 Redis、MySQL、Java进程。</p><p>支持告警并允许自定义告警指 标，通过邮件、短信等方式尽 早通知相关人员进行处理</p><p>缺点：</p><p>环境搭建较为复杂，一般由运维人员完成。</p><h3 id="gc日志" tabindex="-1"><a class="header-anchor" href="#gc日志"><span>GC日志</span></a></h3><p>通过GC日志，可以更好的看到垃圾回收细节上的数据，同时也可以根据每款垃圾回收器的不同特点更好地发现存在的问题。</p><p>使用jvm参数： -verbose:gc可以将GC日志输出到控制台上：</p><figure><img src="'+d+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>把日志保存到文件里：</p><p>使用方法（JDK 8及以下）：-XX:+PrintGCDetails -Xloggc:文件名</p><p>使用方法（JDK 9+）：-Xlog:gc*:file=文件名</p><p>例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Xlog</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">gc</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">D</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">test1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="gcviewer" tabindex="-1"><a class="header-anchor" href="#gcviewer"><span>GCViewer</span></a></h3><p>GCViewer是一个将GC日志转换成可视化图表的小工具，可以将GC日志交给他来进行分析</p><p>github地址：</p><p>https://github.com/chewiebug/GCViewer <a href="https://www.yuque.com/attachments/yuque/0/2024/jar/26146216/1734249179490-b8cc834a-b40e-4f75-8798-671266302038.jar" target="_blank" rel="noopener noreferrer">gcviewer-1.36.jar</a></p><p>使用方法：java -jar gcviewer_1.3.4.jar 日志文件.log</p><figure><img src="'+c+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><figure><img src="'+o+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h3 id="gceasy" tabindex="-1"><a class="header-anchor" href="#gceasy"><span>GCeasy</span></a></h3><p>GCeasy是业界首款使用AI机器学习技术在线进行GC分析和诊断的工具。定位内存泄漏、GC延迟高的问题，提供JVM参数优化建议，支持在线的可视化工具图表展示。</p><p>官方网站：https://gceasy.io/</p><figure><img src="'+m+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>通过监控工具判断堆内存或者GC是否存在问题：</p><h2 id="根据报告发现问题" tabindex="-1"><a class="header-anchor" href="#根据报告发现问题"><span>根据报告发现问题</span></a></h2><p>通过GCeasy工具分析GC日志，下面有几种常见的现象：</p><h3 id="一、正常情况" tabindex="-1"><a class="header-anchor" href="#一、正常情况"><span>一、正常情况</span></a></h3><p>特点：呈现锯齿状，对象创建之后内存上升，一旦发生垃圾回收之后下降到底部，并且每次下降之后的内存大小</p><p>接近，存留的对象较少。</p><figure><img src="'+u+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h3 id="二、缓存对象过多" tabindex="-1"><a class="header-anchor" href="#二、缓存对象过多"><span>二、缓存对象过多</span></a></h3><p>特点：呈现锯齿状，对象创建之后内存上升，一旦发生垃圾回收之后下降到底部，并且每次下降之后的内存大小</p><p>接近，处于比较高的位置。</p><p>问题产生原因： 程序中保存了大量的缓存对象，导致GC之后无法释放，可以使用MAT或者HeapHero等工具进行分析内存占用的原因。</p><figure><img src="'+y+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h3 id="三、内存泄漏" tabindex="-1"><a class="header-anchor" href="#三、内存泄漏"><span>三、内存泄漏</span></a></h3><p>特点：呈现锯齿状，每次垃圾回收之后下降到的内存位置越来越高，最后由于垃圾回收无法释放空间导致对象无</p><p>法分配产生OutOfMemory的错误。</p><p>问题产生原因： 程序中保存了大量的内存泄漏对象，导致GC之后无法释放，可以使用MAT或者HeapHero等工具 进行分析是哪些对象产生了内存泄漏。</p><figure><img src="'+C+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h3 id="四、持续的fullgc" tabindex="-1"><a class="header-anchor" href="#四、持续的fullgc"><span>四、持续的FullGC</span></a></h3><p>特点：在某个时间点产生多次Full GC，CPU使用率同时飙高，用户请求基本无法处理。一段时间之后恢复正常。</p><p>问题产生原因： 在该时间范围请求量激增，程序开始生成更多对象，同时垃圾收集无法跟上对象创建速率，导致</p><p>持续地在进行FULL GC。</p><figure><img src="'+A+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h3 id="五、元空间不足导致的fullgc" tabindex="-1"><a class="header-anchor" href="#五、元空间不足导致的fullgc"><span>五、元空间不足导致的FULLGC</span></a></h3><p>特点：堆内存的大小并不是特别大，但是持续发生FULLGC。</p><p>问题产生原因： 元空间大小不足，导致持续FULLGC回收元空间的数据</p><figure><img src="'+f+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h2 id="解决问题" tabindex="-1"><a class="header-anchor" href="#解决问题"><span>解决问题：</span></a></h2><p>解决GC问题的手段中，前三种是比较推荐的手段，第四种仅在前三种无法解决时选用：</p><p>1，优化基础jjvm参数：基础jvm参数的设置不当，会导致频繁FullGC的产生</p><p>2，减少对象产生：大多数场景下的FullGC是由于对象产生速度过快导致的，减少对象产生可以有效的缓解FullGC的发生</p><p>3，更换垃圾回收器：选择适合当前业务场景的垃圾回收器，减少延迟，提高吞吐量</p><p>4，优化垃圾回收器参数：优化垃圾回收器的参数，能在一定程度上提升GC效率</p><h3 id="获取不同版本java的虚拟机参数" tabindex="-1"><a class="header-anchor" href="#获取不同版本java的虚拟机参数"><span>获取不同版本java的虚拟机参数：</span></a></h3><p>进入oracle的官网，找到java产品，进入</p><figure><img src="'+v+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>往下拉：</p><figure><img src="'+b+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><figure><img src="'+B+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><figure><img src="'+x+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h3 id="优化基础jvm参数" tabindex="-1"><a class="header-anchor" href="#优化基础jvm参数"><span>优化基础JVM参数</span></a></h3><h4 id="参数1-xmx-和-–xms" tabindex="-1"><a class="header-anchor" href="#参数1-xmx-和-–xms"><span>参数1 ： -Xmx 和 –Xms</span></a></h4><p>-Xmx参数设置的是最大堆内存，但是由于程序是运行在服务器或者容器上，计算可用内存时，要将元空间、操作系统、 其它软件占用的内存排除掉。</p><p>案例： 服务器内存4G，操作系统+元空间最大值+其它软件占用1.5G，-Xmx可以设置为2g。</p><p>最合理的设置方式应该是根据<strong>最大并发量估算</strong>服务器的配置，然后再根据服务器配置计算最大堆内存的值。</p><figure><img src="'+G+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>-Xms用来设置初始堆大小，建议将-Xms设置的和-Xmx一样大，有以下几点好处：</p><p>✓ 运行时性能更好，堆的扩容是需要向操作系统申请内存的，这样会导致程序性能短期下降。</p><p>✓ 可用性问题，如果在扩容时其他程序正在使用大量内存，很容易因为操作系统内存不足分配失败。</p><p>✓ 启动速度更快，Oracle官方文档的原话：如果初始堆太小，Java 应用程序启动会变得很慢，因为 JVM 被迫频</p><p>繁执行垃圾收集，直到堆增长到更合理的大小。为了获得最佳启动性能，请将初始堆大小设置为与最大堆大小相同。</p><h4 id="参数2-xx-maxmetaspacesize-和-–xx-metaspacesize" tabindex="-1"><a class="header-anchor" href="#参数2-xx-maxmetaspacesize-和-–xx-metaspacesize"><span>参数2 ： -XX:MaxMetaspaceSize 和 –XX:MetaspaceSize</span></a></h4><p>-XX:MaxMetaspaceSize=值 参数指的是最大元空间大小，默认值比较大，如果出现元空间内存泄漏会让操作系</p><p>统可用内存不可控，建议根据测试情况设置最大值，一般设置为256m。</p><p>-XX:MetaspaceSize=值 参数指的是到达这个值之后会触发FULLGC（网上很多文章的初始元空间大小是错误的）， 后续什么时候再触发JVM会自行计算。如果设置为和MaxMetaspaceSize一样大，就不会FULLGC，但是对象也无法回收。</p><figure><img src="'+F+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h4 id="参数3-xss虚拟机栈大小" tabindex="-1"><a class="header-anchor" href="#参数3-xss虚拟机栈大小"><span>参数3 ： -Xss虚拟机栈大小</span></a></h4><p>如果我们不指定栈的大小，JVM 将创建一个具有默认大小的栈。大小取决于操作系统和计算机的体系结构。</p><p>比如Linux x86 64位 ： 1MB，如果不需要用到这么大的栈内存，完全可以将此值调小节省内存空间，合理值为</p><p>256k – 1m之间。</p><p>使用：-Xss256k</p><h4 id="参数4-不建议手动设置的参数" tabindex="-1"><a class="header-anchor" href="#参数4-不建议手动设置的参数"><span>参数4 ： 不建议手动设置的参数</span></a></h4><p>由于JVM底层设计极为复杂，一个参数的调整也许让某个接口得益，但同样有可能影响其他更多接口。</p><p>➢ -Xmn 年轻代的大小，默认值为整个堆的1/3，可以根据峰值流量计算最大的年轻代大小，尽量让对象只存放在年轻代，不进入老年代。但是实际的场景中，接口的响应时间、创建对象的大小、程序内部还会有一些定时任务等不 确定因素都会导致这个值的大小并不能仅凭计算得出，如果设置该值要进行大量的测试。G1垃圾回收器尽量不要设置该值，G1会动态调整年轻代的大小。</p><figure><img src="'+E+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>➢ ‐XX:SurvivorRatio 伊甸园区和幸存者区的大小比例，默认值为8。</p><p>➢ ‐XX:MaxTenuringThreshold 最大晋升阈值，年龄大于此值之后，会进入老年代。另外JVM有动态年龄判断机</p><p>制：将年龄从小到大的对象占据的空间加起来，如果大于survivor区域的50%，然后把等于或大于该年龄的对象， 放入到老年代。</p><figure><img src="'+D+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h4 id="其他参数" tabindex="-1"><a class="header-anchor" href="#其他参数"><span>其他参数 ：</span></a></h4><p>◆ -XX:+DisableExplicitGC</p><p>禁止在代码中使用System.gc()， System.gc()可能会引起FULLGC，在代码中尽量不要使用。使用</p><p>DisableExplicitGC参数可以禁止使用System.gc()方法调用。</p><p>◆ -XX:+HeapDumpOnOutOfMemoryError：发生OutOfMemoryError错误时，自动生成hprof内存快照文件。</p><p>-XX:HeapDumpPath=<code>&lt;path&gt;</code>：指定hprof文件的输出路径。</p><p>◆ 打印GC日志</p><p>JDK8及之前 ： -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:文件路径</p><p>JDK9及之后 ： -Xlog:gc*:file=文件路径</p><h4 id="jvm参数模板" tabindex="-1"><a class="header-anchor" href="#jvm参数模板"><span>JVM参数模板：</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Xms1g</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Xmx1g</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Xss256k</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">XX</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">MaxMetaspaceSize</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">512m </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">XX</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DisableExplicitGC</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">XX</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HeapDumpOnOutOfMemoryError</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">XX</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">HeapDumpPath</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">opt</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">logs</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">my</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">hprof</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">XX</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PrintGCDetails</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">XX</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PrintGCDateStamps</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Xloggc</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">文件路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p>JDK9及之后gc日志输出修改为 -Xlog:gc*:file=文件名 （替换掉模板后三行）</p><p>堆内存大小和栈内存大小根据实际情况灵活调整。</p><h3 id="减少对象产生" tabindex="-1"><a class="header-anchor" href="#减少对象产生"><span>减少对象产生</span></a></h3><p>参考内存调优</p><h3 id="垃圾回收器的选择" tabindex="-1"><a class="header-anchor" href="#垃圾回收器的选择"><span>垃圾回收器的选择</span></a></h3><p>背景：<br> 小李负责的程序在高峰期遇到了性能瓶颈，团队从业务代码入手优化了多次也取得了不错的效<br> 果，这次他希望能采用更合理的垃圾回收器优化性能。<br> 思路：</p><ol><li>编写Jmeter脚本对程序进行压测，同时添加RT响应时间、每秒钟的事务数等指标进行监控。</li><li>选择不同的垃圾回收器进行测试，并发量分别设置50、100、200，观察<br> 数据的变化情况。</li></ol><p>测试例子：</p><p>分别测试使用 <strong>ParNew + CMS，组合 PS+PO组合，G1</strong>这三种垃圾回收器那种性能最好：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RestController</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BasicController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 模拟fullGC频发的场景，测试哪一种垃圾回收器组合能获得更好的性能</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //创建一个缓存，key是弱引用，value是软引用，内存不足时value会被回收，value被回收时，key也会被回收</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Cache</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cache </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Caffeine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">weakKeys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">softValues</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> objs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _1MB </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1024</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RandomStringUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">randomAlphabetic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _1MB]);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;成功&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试组合 PS+PO组合</strong></p><p><strong>配置jvm参数</strong></p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-Xms4g</span></span>\n<span class="line"><span>-Xmx4g</span></span>\n<span class="line"><span>-Xss256k</span></span>\n<span class="line"><span>-XX:MaxMetaspaceSize=512m</span></span>\n<span class="line"><span>-XX:+DisableExplicitGC</span></span>\n<span class="line"><span>-XX:+HeapDumpOnOutOfMemoryError</span></span>\n<span class="line"><span>-XX:HeapDumpPath=D:/test.hprof</span></span>\n<span class="line"><span>-XX:+PrintGC</span></span>\n<span class="line"><span>-XX:+PrintGCDetails</span></span>\n<span class="line"><span>-XX:+UseParallelOldGC</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动服务器，然后启动jmeter进行并发压测，记录50个线程，100个线程，200个线程时的性能</p><figure><img src="'+X+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>可以看到在服务器中的日志上有很多fullGC，运行一段时间记录最大响应时长 7秒</p><p>然后测试50个并发，100个，200个。。</p><figure><img src="'+M+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>更换垃圾回收器：<strong>ParNew + CMS</strong></p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-Xms4g</span></span>\n<span class="line"><span>-Xmx4g</span></span>\n<span class="line"><span>-Xss256k</span></span>\n<span class="line"><span>-XX:MaxMetaspaceSize=512m</span></span>\n<span class="line"><span>-XX:+DisableExplicitGC</span></span>\n<span class="line"><span>-XX:+HeapDumpOnOutOfMemoryError</span></span>\n<span class="line"><span>-XX:HeapDumpPath=D:/test.hprof</span></span>\n<span class="line"><span>-XX:+PrintGC</span></span>\n<span class="line"><span>-XX:+PrintGCDetails</span></span>\n<span class="line"><span>-XX:+UseConcMarkSweepGC</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+j+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>使用G1垃圾回收器</p><figure><img src="'+z+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>以上测试了对响应时间的影响。</p><p>测试突发的fullgc对请求的延迟影响，可以在上面测试的同时请求一个在年轻代产生大量对象的接口来测试这个请求的响应时间，例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ArrayList</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> object </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _1MB]);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="垃圾回收参数调优" tabindex="-1"><a class="header-anchor" href="#垃圾回收参数调优"><span>垃圾回收参数调优</span></a></h3><p>参数手册：</p><p><a href="https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html" target="_blank" rel="noopener noreferrer">https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html</a></p><p>这部分优化效果未必出色，仅当前边的一些手动无效时才考虑。</p><p>一个优化的案例：</p><p>CMS的并发模式失败（concurrent mode failure）现象。由于CMS的垃圾清理线程和用户线程是并行进行的，如果在<strong>并发清理</strong>的过程中老年代的空间不足以容纳放入老年代的对象，会产生并发模式失败。</p><figure><img src="'+J+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><figure><img src="'+P+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>并发模式失败会导致Java虚拟机使用Serial Old单线程进行FULLGC回收老年代，出现长时间的停顿。</p><p>解决方案：</p><p>1.减少对象的产生以及对象的晋升。</p><p>2.增加堆内存大小</p><p>3.优化垃圾回收器的参数，比如-XX:CMSInitiatingOccupancyFraction=值，当老年代大小到达该阈值时，会</p><p>自动进行CMS垃圾回收，通过控制这个参数提前进行老年代的垃圾回收，减少其大小。</p><p>JDK8中默认这个参数值为 -1，根据其他几个参数计算出阈值：</p><p>((100 - MinHeapFreeRatio) + (double)(CMSTriggerRatio * MinHeapFreeRatio) / 100.0)</p><p>例如：</p><p>加上虚拟机参数打印虚拟机参数的命令：</p><p>-XX:+PrintFlagsInitial</p><figure><img src="'+w+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>结果是92，那么当老年代阈值到达百分之92时才触发垃圾回收。</p><p>该参数设置完是不会生效的，必须开启-XX:+UseCMSInitiatingOccupancyOnly参数。</p><figure><img src="'+V+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>保存了的内存快照除了可以通过MAT进行分析，还可以通过使用在线工具HeapHero来进行分析。</p><p>生成堆内存快照的时候会自动做一次fullGC ，会清理掉可以被回收的对象。</p><p>那如何把能被回收的对象也保存到fullGC?</p><p>以前的生成内存快照的命令：</p><p>jmap -dump:live,format=b,file=/usr/local/jvm/apps/test1.hprof 19608</p><p>使用MAT分析内存大小是22.9MB,这个live意思是只保存存活的对象</p><p>把live去掉就能保存下来能被回收的对象了，</p><p>例如使用如下命令：</p><p>jmap -dump:format=b,file=/usr/local/jvm/apps/test3.hprof 19608</p><p>MAT查看不可达对象的功能：</p><figure><img src="'+S+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>比如在不可达对象列表中，除了发现大量的byte[]还发现了大量的线程，可以考虑跟踪线程的栈信息来判断对象在哪里创建。</p><p>方式：使用visualvm的Threads-&gt;Thread Dump</p><figure><img src="'+L+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h3 id="gc调优的核心流程" tabindex="-1"><a class="header-anchor" href="#gc调优的核心流程"><span>GC调优的核心流程：</span></a></h3><p>1、监控是否出现连续的FULL GC或者单次GC时间过长。</p><p>2、诊断并解决，一般通过四种途径解决：</p><p>✓ 优化基础JVM参数</p><p>✓ 减少对象的产生</p><p>✓ 更换垃圾回收器</p><p>✓ 优化垃圾回收参数</p><p>3、在测试环境验证问题是否已经解决，最后发布上线。</p>',235))])}]]),U=JSON.parse('{"path":"/zh/posts/JVM/6.html","title":"JVM的GC调优","lang":"zh-CN","frontmatter":{"title":"JVM的GC调优","icon":"pen-to-square","date":"2024-11-29T00:00:00.000Z","sticky":true,"category":["JVM"],"tag":["GC调优"],"star":true,"description":"Java虚拟机的GC调优","head":[["meta",{"property":"og:url","content":"https://lcyp.github.io/blog/zh/blog/zh/posts/JVM/6.html"}],["meta",{"property":"og:site_name","content":"𝖑𝖎𝖆𝖓𝖌𝖈𝖍𝖊𝖓𝖞𝖆𝖓𝖌\'𝖘 𝖇𝖑𝖔𝖌"}],["meta",{"property":"og:title","content":"JVM的GC调优"}],["meta",{"property":"og:description","content":"Java虚拟机的GC调优"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-02T10:57:33.000Z"}],["meta",{"property":"article:tag","content":"GC调优"}],["meta",{"property":"article:published_time","content":"2024-11-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-02T10:57:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM的GC调优\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-29T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-02T10:57:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"梁晨阳\\",\\"url\\":\\"https://lcyp.github.io/blog/zh/\\"}]}"]]},"headers":[{"level":2,"title":"GC调优","slug":"gc调优","link":"#gc调优","children":[]},{"level":2,"title":"GC调优的核心指标","slug":"gc调优的核心指标","link":"#gc调优的核心指标","children":[]},{"level":2,"title":"GC调优的步骤：","slug":"gc调优的步骤","link":"#gc调优的步骤","children":[]},{"level":2,"title":"GC调优的常用工具：","slug":"gc调优的常用工具","link":"#gc调优的常用工具","children":[{"level":3,"title":"Jstat工具","slug":"jstat工具","link":"#jstat工具","children":[]},{"level":3,"title":"VisualVm","slug":"visualvm","link":"#visualvm","children":[]},{"level":3,"title":"Prometheus+Grafana","slug":"prometheus-grafana","link":"#prometheus-grafana","children":[]},{"level":3,"title":"GC日志","slug":"gc日志","link":"#gc日志","children":[]},{"level":3,"title":"GCViewer","slug":"gcviewer","link":"#gcviewer","children":[]},{"level":3,"title":"GCeasy","slug":"gceasy","link":"#gceasy","children":[]}]},{"level":2,"title":"根据报告发现问题","slug":"根据报告发现问题","link":"#根据报告发现问题","children":[{"level":3,"title":"一、正常情况","slug":"一、正常情况","link":"#一、正常情况","children":[]},{"level":3,"title":"二、缓存对象过多","slug":"二、缓存对象过多","link":"#二、缓存对象过多","children":[]},{"level":3,"title":"三、内存泄漏","slug":"三、内存泄漏","link":"#三、内存泄漏","children":[]},{"level":3,"title":"四、持续的FullGC","slug":"四、持续的fullgc","link":"#四、持续的fullgc","children":[]},{"level":3,"title":"五、元空间不足导致的FULLGC","slug":"五、元空间不足导致的fullgc","link":"#五、元空间不足导致的fullgc","children":[]}]},{"level":2,"title":"解决问题：","slug":"解决问题","link":"#解决问题","children":[{"level":3,"title":"获取不同版本java的虚拟机参数：","slug":"获取不同版本java的虚拟机参数","link":"#获取不同版本java的虚拟机参数","children":[]},{"level":3,"title":"优化基础JVM参数","slug":"优化基础jvm参数","link":"#优化基础jvm参数","children":[]},{"level":3,"title":"减少对象产生","slug":"减少对象产生","link":"#减少对象产生","children":[]},{"level":3,"title":"垃圾回收器的选择","slug":"垃圾回收器的选择","link":"#垃圾回收器的选择","children":[]},{"level":3,"title":"垃圾回收参数调优","slug":"垃圾回收参数调优","link":"#垃圾回收参数调优","children":[]},{"level":3,"title":"GC调优的核心流程：","slug":"gc调优的核心流程","link":"#gc调优的核心流程","children":[]}]}],"git":{"createdTime":1735815453000,"updatedTime":1735815453000,"contributors":[{"name":"lcyp","email":"2089117474@qq.com","commits":1}]},"readingTime":{"minutes":15.13,"words":4540},"filePathRelative":"zh/posts/JVM/6.md","localizedDate":"2024年11月29日","excerpt":"<p>Java虚拟机的GC调优</p>\\n","autoDesc":true}')}}]);