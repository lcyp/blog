"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[2124],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},5225:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>z,data:()=>_});var n=a(641);const l=a.p+"assets/img/image-56.abea25c5.png",t=a.p+"assets/img/image-57.d828c956.png",e=a.p+"assets/img/image-58.09bce172.png",h=a.p+"assets/img/image-59.39f3c795.png",p=a.p+"assets/img/image-60.7e59e9ba.png",r=a.p+"assets/img/image-61.333ac626.png",k=a.p+"assets/img/image-62.5ebc3942.png",d=a.p+"assets/img/image-63.5197803a.png",g=a.p+"assets/img/image-64.51c72ea3.png",o=a.p+"assets/img/image-65.e67406e3.png",c=a.p+"assets/img/image-66.c977bd3d.png",y=a.p+"assets/img/image-67.6659dfdc.png",B=a.p+"assets/img/image-68.a8dc5245.png",A=a.p+"assets/img/image-69.d70ac988.png",m=a.p+"assets/img/image-70.f5e6a0ac.png",u=a.p+"assets/img/image-71.95ef6b82.png",v=a.p+"assets/img/image-72.46f64b74.png",b=a.p+"assets/img/image-73.9baf0c6e.png",f=a.p+"assets/img/image-74.245bf251.png",C=a.p+"assets/img/image-75.75c8e82e.png",F=a.p+"assets/img/image-76.8e4f89ee.png",E=a.p+"assets/img/image-77.8803621a.png",D=a.p+"assets/img/image-78.4565d28b.png",x=a.p+"assets/img/image-79.b0517afc.png",J=a.p+"assets/img/image-80.a998c66d.png",j=a.p+"assets/img/image-81.7d60d58b.png",M={},z=(0,a(6262).A)(M,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,[s[0]||(s[0]=(0,n.Lk)("p",null,"Java虚拟机的内存结构",-1)),(0,n.Q3)(" more "),s[1]||(s[1]=(0,n.Fv)('<h2 id="程序计数器-pc寄存器" tabindex="-1"><a class="header-anchor" href="#程序计数器-pc寄存器"><span>程序计数器(PC寄存器)</span></a></h2><p>程序计数器（ProgramCounterRegister）也叫PC寄存器。</p><p>程序计数器是线程私有的，每个线程一份，每个线程会通过程序计数器记录当前要执行的字节码指令的地址。</p><p>在加载阶段，虚拟机将字节码文件中的指令读取到内存之后，会将原文件中的偏移量转换成内存地址。每一条字节码指令都会拥有一个内存地址。</p><p><img src="'+l+'" alt=" " loading="lazy"><img src="'+t+'" alt=" " loading="lazy"></p><ul><li><strong>程序计数器</strong> 作为 JVM 的一个重要组成部分，管理了线程执行过程中各个指令的顺序，确保多线程程序能够正常运行。</li><li>在多线程环境下，它提供了必要的线程间状态隔离，以确保每个线程从其应有的位置继续执行。</li><li>JVM 通过程序计数器、栈帧等数据结构协作，实现了线程控制和方法调用的功能。</li></ul><h3 id="_1-在硬件中的作用" tabindex="-1"><a class="header-anchor" href="#_1-在硬件中的作用"><span>1. <strong>在硬件中的作用</strong></span></a></h3><ul><li><strong>硬件层面</strong>，程序计数器是一个很小的内存区域，它保存着当前正在执行的指令的地址（或偏移量）。CPU 会根据程序计数器中的值来从内存中取指令并执行。每当 CPU 执行完一条指令后，程序计数器会自动更新为下一条指令的地址。</li><li>程序计数器保证了程序在执行过程中能够按照正确的顺序逐条执行指令。</li></ul><h3 id="_2-在-java-中的作用" tabindex="-1"><a class="header-anchor" href="#_2-在-java-中的作用"><span>2. <strong>在 Java 中的作用</strong></span></a></h3><p>在 <strong>Java 虚拟机（JVM）</strong> 中，程序计数器有着不同的作用，具体来说，JVM 中的程序计数器主要用于以下目的：</p><ul><li><strong>线程执行的控制</strong>：每个线程都有独立的程序计数器。Java 中的多线程是通过线程之间的切换来实现的，而每个线程的程序计数器用于记录该线程当前执行到的字节码指令的地址。当线程被调度时，程序计数器帮助虚拟机恢复该线程的执行位置。</li><li><strong>方法调用与返回</strong>：在方法调用过程中，程序计数器指向当前方法的下一条指令。当方法调用结束时，程序计数器将指向调用该方法的位置。</li></ul><h3 id="_3-jvm-中的程序计数器的特性" tabindex="-1"><a class="header-anchor" href="#_3-jvm-中的程序计数器的特性"><span>3. <strong>JVM 中的程序计数器的特性</strong></span></a></h3><ul><li><strong>每个线程都有自己的程序计数器</strong>：JVM 是多线程的，每个线程都有一个独立的程序计数器，这使得线程可以在暂停和恢复时正确执行，不会受到其他线程的影响。</li><li><strong>程序计数器的内容</strong>：对于 <strong>普通方法</strong>，程序计数器保存当前线程正在执行的字节码的<strong>地址</strong>；对于 <strong>native 方法</strong>（由本地方法实现的方法），程序计数器的值为 <code>undefined</code>。</li><li><strong>线程切换时的作用</strong>：程序计数器帮助在多线程切换时保存当前线程的执行位置，确保线程被切换回来时能够从正确的位置继续执行。</li></ul><h3 id="_4-在-jvm-栈中的作用" tabindex="-1"><a class="header-anchor" href="#_4-在-jvm-栈中的作用"><span>4. <strong>在 JVM 栈中的作用</strong></span></a></h3><ul><li>在 JVM 中，程序计数器属于每个线程的私有数据。线程的执行是通过 JVM 栈中的栈帧来管理的，每个栈帧包含了方法的局部变量、操作数栈、常量池引用等内容。程序计数器则与栈帧中的内容一起工作，确保线程能够根据自己的执行路径正确跳转到对应的字节码。</li></ul><h3 id="_5-程序计数器与其他内存区域的关系" tabindex="-1"><a class="header-anchor" href="#_5-程序计数器与其他内存区域的关系"><span>5. <strong>程序计数器与其他内存区域的关系</strong></span></a></h3><ul><li><strong>堆（Heap）</strong>：用于存放对象实例，程序计数器不会直接涉及堆。</li><li><strong>栈（Stack）</strong>：每个线程拥有一个独立的栈，栈中保存了方法调用的上下文（栈帧）。程序计数器通过记录方法调用的下一条指令来帮助线程在栈帧间跳转。</li><li><strong>方法区（Method Area）</strong>：方法区包含了类信息、常量池、静态变量等，程序计数器通过加载字节码的方式与方法区互动。</li></ul><h3 id="_6-程序计数器的特点" tabindex="-1"><a class="header-anchor" href="#_6-程序计数器的特点"><span>6. <strong>程序计数器的特点</strong></span></a></h3><ul><li><strong>小巧且高效</strong>：程序计数器是一块非常小的内存区域（通常只有几字节），它的作用是指示当前指令的地址，因此非常高效。</li><li><strong>独立于线程</strong>：每个线程都有独立的程序计数器，确保线程间不会互相影响。</li></ul><h3 id="_7-总结" tabindex="-1"><a class="header-anchor" href="#_7-总结"><span>7. <strong>总结</strong></span></a></h3><ul><li><strong>程序计数器</strong> 作为 JVM 的一个重要组成部分，管理了线程执行过程中各个指令的顺序，确保多线程程序能够正常运行。</li><li>在多线程环境下，它提供了必要的线程间状态隔离，以确保每个线程从其应有的位置继续执行。</li><li>JVM 通过程序计数器、栈帧等数据结构协作，实现了线程控制和方法调用的功能。</li></ul><h2 id="程序计数器在运行中会出现内存溢出吗" tabindex="-1"><a class="header-anchor" href="#程序计数器在运行中会出现内存溢出吗"><span>程序计数器在运行中会出现内存溢出吗？</span></a></h2><p>内存溢出指的是程序在使用某一块内存区域时，存放的数据需要占用的内存大小超过了虚拟机能提供的内存上限。</p><p><strong>因为每个线程只存储一个固定长度的内存地址，程序计数器是不会发生内存溢出的。</strong></p><p>程序员无需对程序计数器做任何处理</p><h2 id="栈" tabindex="-1"><a class="header-anchor" href="#栈"><span>栈</span></a></h2><p>栈分为两个部分，分别是Java虚拟机栈和本地方法栈。</p><p>Java虚拟机栈用来保存在Java中实现的方法，本地方法栈保存的是Native方法（用C++实现的方法）</p><p>但是HotSpot实现人员发现不管是Java来实现还是C++来实现的方法本质上都是方法，所以在HotSpot中就使用了一个栈来保存这两种方法的信息。</p><p>Java虚拟机栈（JavaVirtualMachineStack）采用栈的数据结构来管理方法调用中的基本数据，先进后出（FILO）,每一个方法的调用都使用一个栈帧（StackFrame）来保存。</p><p>虚拟机栈是每个线程独有的，是每个线程运行时所需要的内存，因此栈内存也是线程安全的。每个栈由多个栈帧frame组成，每个栈帧对应着每次方法调用的时候所占用的内存。正在执行的方法对应的栈帧叫活动栈帧，每个线程只能有一个活动栈帧。当有栈帧来了就会压入栈底，再来就继续压入，方法执行完后就会依次弹栈。<strong>Java虚拟机栈随着线程的创建而创建，而回收则会在线程的销毁时进行。由于方法可能会在不同线程中执行，每个线程都会包含一个自己的虚拟机栈。</strong></p><p>在idea中通过debug调试可以看到每个线程对应的栈的栈帧：</p><figure><img src="'+e+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>栈帧的组成：</p><h3 id="局部变量表" tabindex="-1"><a class="header-anchor" href="#局部变量表"><span>局部变量表：</span></a></h3><p>局部变量表的作用是在方法执行过程中存放所有的局部变量。编译成字节码文件时就可以确定局部变量表的内容。</p><p>栈帧中的局部变量表是一个<strong>数组</strong>，数组中每一个位置称之为槽（slot），long和double类型占用两个槽，其它类型占用一个槽。</p><p>通过jclasslib可以看局部变量表的内容：</p><figure><img src="'+h+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>jvm通过局部变量表控制每个局部变量能访问的范围。</p><p>局部变量表除了能够保存<strong>方法体中声明的局部变量（在局部变量表最后边存）</strong>，还能保存<strong>实例方法(没有 <strong>static修饰的方法</strong> )的this对象（保存在0号槽）</strong>，<strong>方法的参数（顺序和方法中定义的顺序一致）</strong>。</p><p>这是一个带有形参的实例方法案例：</p><figure><img src="'+p+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>案例：为了节省空间，局部变量表中的槽是可以复用的，一旦某个局部变量不再生效，当前槽就可以再次被使用。</p><figure><img src="'+r+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="操作数栈" tabindex="-1"><a class="header-anchor" href="#操作数栈"><span>操作数栈：</span></a></h3><p>操作数栈是栈帧中虚拟机在执行指令过程中用来存放中间数据的一块区域。他是一种栈式的数据结构，如果一条指令将一个值压入操作数栈，则后面的指令可以弹出并使用该值。</p><p>在编译期就可以确定操作数栈的最大深度，从而在执行时正确的分配内存大小。 <img src="'+k+'" alt=" " loading="lazy"></p><h3 id="帧数据" tabindex="-1"><a class="header-anchor" href="#帧数据"><span>帧数据：</span></a></h3><p>帧数据主要包含动态链接，方法出口，异常表的引用。</p><h4 id="动态链接" tabindex="-1"><a class="header-anchor" href="#动态链接"><span>动态链接：</span></a></h4><p>当前类的字节码指令引用了其它类的属性或方法时，需要将符号引用（编号）转换成对应的运行时常量池中的内存地址。动态链接就保存了编号到运行时常量池的内存地址的映射关系。</p><figure><img src="'+d+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>保存的是其它类的属性或方法数据。</p><h4 id="方法出口" tabindex="-1"><a class="header-anchor" href="#方法出口"><span>方法出口：</span></a></h4><p>方法出口指的是方法在正确或者异常结束时，当前栈帧会被弹出，同时程序计数器应该指向上一个栈帧中的下一条指令的地址。所以在当前栈帧中，需要存储此方法出口的地址。</p><p>因此方法出口就是一个地址：上一个栈帧中的下一条指令的地址。</p><h4 id="异常表" tabindex="-1"><a class="header-anchor" href="#异常表"><span>异常表:</span></a></h4><p>异常表存放的是代码中<strong>异常的处理信息</strong>，包含了异常捕获的生效范围以及<strong>异常发生后跳转到的字节码指令位置</strong>。</p><figure><img src="'+g+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="栈内存溢出" tabindex="-1"><a class="header-anchor" href="#栈内存溢出"><span>栈内存溢出</span></a></h3><p>Java虚拟机栈如果栈帧过多，占用内存超过栈内存可以分配的最大大小就会出现内存溢出。</p><p>Java虚拟机栈内存溢出时会出现StackOverflowError的错误。</p><p>模型：</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="设置栈的大小" tabindex="-1"><a class="header-anchor" href="#设置栈的大小"><span>设置栈的大小：</span></a></h4><p>语法：-Xss栈大小</p><p>单位：字节（默认，必须是2024的倍数），k或者K（KB），m或者M（MB），g或者G（GB）</p><p>例：</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>与-Xss类似，也可以使用-XX:ThreadStackSize调整标志来配置堆栈大小。</p><p>格式为：-XX:ThreadStackSize=1024</p><h4 id="hotspotjvm对栈大小的最大值和最小值有要求" tabindex="-1"><a class="header-anchor" href="#hotspotjvm对栈大小的最大值和最小值有要求"><span>HotSpotJVM对栈大小的最大值和最小值有要求：</span></a></h4><p>比如测试如下两个参数：</p><p>-Xss1k</p><p>-Xss1025m</p><p>Windows(64位)下的jdk8测试最小值为180k,最大值为1024m。</p><figure><img src="'+y+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+B+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>局部变量过多，操作数栈深度过大也会影响栈内存的大小。</strong></p><p>一般情况下，工作中即便使用了递归进行操作，栈的深度最多也只能到几百，不会出现栈的溢出。所以可以手动指定为-Xss256k节省内存。</p><h3 id="本地方法栈" tabindex="-1"><a class="header-anchor" href="#本地方法栈"><span>本地方法栈</span></a></h3><p>Java虚拟机栈存储了Java方法调用时的栈帧，而本地方法栈存储的是native本地方法的栈帧。</p><p>在Hotspot虚拟机中，<strong>Java虚拟机栈和本地方法栈实现上使用了同一个栈空间。</strong></p><p>本地方法栈会在栈内存上生成一个栈帧，临时保存方法的参数同时方便出现异常时也把本地方法的栈信息打印出来。 <img src="'+A+'" alt=" " loading="lazy"></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Demo1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            FileOutputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> fos</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileOutputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;O:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">123.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            fos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FileNotFoundException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+m+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="堆" tabindex="-1"><a class="header-anchor" href="#堆"><span>堆</span></a></h2><p>模拟堆内存溢出：</p><p>通过new关键字不停创建对象，放入集合中</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Demo1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ArrayList</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">objects</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1024</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> in thread </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;main&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">OutOfMemoryError</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Java</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> heap space</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">at </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Demo1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Demo1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">java</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">13</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到堆内存大小是有上限的，当对象一直向堆中放入对象达到上限之后，就会抛出OutOfMemory错误。</p><h3 id="arthas查看堆内存的大小" tabindex="-1"><a class="header-anchor" href="#arthas查看堆内存的大小"><span>Arthas查看堆内存的大小：</span></a></h3><p>used指的是当前已使用的堆内存，total是jvm已经分配的可以使用的内存，max是jvm可以分配的最大堆内存。</p><p><strong>dashboard -i 刷新频率(毫秒)</strong></p><figure><img src="'+u+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>memory 命令</strong></p><figure><img src="'+v+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>随着堆中的对象增多，used的空间会变大，total会将自己的空间分配给used,max也会将一部分空间分配给total。</p><p>如果不设置任何的虚拟机参数，max默认是系统内存的1/4,total默认是系统内存的1/64.在实际应用中一般都需要设置total和max的值。</p><h3 id="设置堆的大小" tabindex="-1"><a class="header-anchor" href="#设置堆的大小"><span>设置堆的大小：</span></a></h3><p>要修改堆的大小，可以使用虚拟机参数 -Xmx(max最大值) 和 -Xms(初始的total)</p><p>语法： -Xmx(max最大值) -Xms(初始的total)</p><p>单位：字节（默认，必须是1024的倍数），k或者K（KB），m或者M(MB),g或者G(GB)</p><p>限制：Xmx必须大于2MB，Xms必须大于1MB</p><figure><img src="'+b+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用Arthas，memory命令查看：</p><figure><img src="'+f+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果显示的堆大小与设置的值不一样，是因为与垃圾回收器有关，计算的是可以分配对象的内存，而不是整个内存。</p><p>Java服务端程序开发时，建议将-Xmx和-Xms设置为相同的值，这样在程序启动之后可以使用的总内存就是最大内存，而无需向Java虚拟机再次申请，减少了申请并分配内存时间上的开销，同时也不会出现内存过剩之后堆收缩的情况。</p><h2 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区"><span>方法区</span></a></h2><p>方法区是《Java虚拟机规范》中设计的<strong>虚拟概念</strong>，每款jvm在实现上都各不相同，Hotspot设计如下：</p><p>jdk7及之前的版本将方法区存放在<strong>堆区域中的永久代</strong>空间，堆的大小由虚拟机参数来控制。</p><p>jdk7调整永久代大小：-XX:MaxPermSize=值</p><p>jdk8及之后的版本将方法区存放在<strong>元空间</strong>中，元空间位于操作系统维护的<strong>直接内存</strong>中，默认情况下只要不超过操作系统承受的上限，可以一直分配。</p><p>jdk8设置元空间的最大大小：-XX:MaxMetaspaceSize=值</p><p><strong>方法区是存放基础信息的位置，线程共享，主要包含3部分内容：</strong></p><p><strong>类的元信息</strong>：保存了所有类的基本信息</p><p><strong>运行时常量池</strong>：保存了字节码文件中的常量池</p><p><strong>字符串常量池</strong>：保存了字符串常量</p><p><strong>永久代和Java堆的关系：</strong></p><ol><li><strong>逻辑上的分离</strong> ： <ul><li><strong>Java堆</strong> ：是用于存放对象实例的内存区域，包括年轻代和老年代。所有通过 <code>new </code> 关键字创建的对象实例都会被分配在这个区域内。</li><li><strong>永久代</strong> ：是一个独立于Java堆的内存区域，专门用于存储类的元数据（如类结构、方法信息）、运行时常量池以及静态变量等。它有自己的内存管理和垃圾回收机制。</li></ul></li><li><strong>物理位置</strong> ： <ul><li>在某些实现中，永久代和Java堆可能位于同一块连续的物理内存地址范围内，但这并不意味着它们在逻辑上是相同的或可以互换使用。实际上，它们有着不同的用途和管理策略。</li></ul></li><li><strong>内存管理和垃圾回收</strong> ： <ul><li>Java堆和永久代有不同的内存管理和垃圾回收机制。例如，Java堆中的垃圾回收主要关注的是对象的可达性分析，而永久代则有自己特定的垃圾回收算法，比如处理类卸载等。</li></ul></li></ol><p>在JDK 6及之前版本中，虽然永久代和Java堆在物理上可能是相邻或者连续的内存区域，但它们在逻辑上是两个独立的内存区域，各自服务于不同的目的并且具有不同的管理和回收机制。随着JDK版本的发展，永久代的概念逐渐被淘汰，其功能被新的机制所替代。</p><p>jdk6的内存模型图（大致内容）：</p><figure><img src="'+C+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>jdk7时，有永久代，但是字符串常量池，静态变量从永久代移除，保存到堆中：</p><figure><img src="'+F+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>jdk8及以后，没有永久代，被替换成了元空间，存储在了本地内存中：</p><figure><img src="'+E+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-类的元信息" tabindex="-1"><a class="header-anchor" href="#_1-类的元信息"><span>1，类的元信息：</span></a></h3><p>类加载器在加载完类之后，类加载器的任务就完成了，java虚拟机会将字节码中的信息保存到<strong>方法区中</strong>。生成一个<strong>InstanceKlass对象</strong>（使用C++编写的对象），保存类的所有信息（一般信息，常量池，接口，字段，方法，属性），里边还包含实现特定功能比如多态的信息（虚方法表）。</p><figure><img src="'+D+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在底层实现上，jvm会把常量池和方法信息筛出来用一块单独的区域存放，而InstanceKlass中只是存放了他们的引用。</p><h3 id="_2-运行时常量池" tabindex="-1"><a class="header-anchor" href="#_2-运行时常量池"><span>2，运行时常量池：</span></a></h3><p>字节码文件通过编号查表的方式找到常量，这种常量池称为静态常量池，比如字节码文件中的常量池。</p><p>当常量池加载到内存中之后，可以通过内存地址快速的定位到常量池中的内容，这种常量池称为运行时常量池。</p><p>在加载阶段，字节码文件中的常量池会被读取到内存中，由原来的静态常量池变成运行时常量池。</p><p>常量由符号引用变为直接引用。</p><h3 id="_3-字符串常量池" tabindex="-1"><a class="header-anchor" href="#_3-字符串常量池"><span>3，字符串常量池：</span></a></h3><p>方法区中除了类的元信息、运行时常量池之外，还有一块区域叫字符串常量池(StringTable)。</p><p>字符串常量池存储代码中定义的常量字符串内容。比如“123” 这个123就会被放入字符串常量池。</p><figure><img src="'+x+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>字符串常量池和运行时常量池有什么关系？</strong></p><p>早期设计时，字符串常量池是属于运行时常量池的一部分，他们存储的位置也是一致的。后续做出了调整， 将字符串常量池和运行时常量池做了拆分。</p><p><strong>存储位置</strong>：</p><ul><li><strong>JDK 6 及之前</strong>：字符串常量池位于方法区（永久代实现）。</li><li><strong>JDK 7</strong>：字符串常量池被移到了堆内存中。</li><li><strong>JDK 8 及之后</strong>：字符串常量池继续位于堆中。</li></ul><p><strong>唯一性</strong>：</p><ul><li>每个字符串字面量在常量池中只存储一个副本。</li><li>如果两个字符串字面量的内容相同，它们会共享常量池中的同一个实例。</li></ul><p><strong>字符串的驻留</strong>：</p><ul><li>字面量字符串会自动存储在常量池中。</li><li>非字面量字符串可以通过调用<code>intern()</code>方法手动将其加入到常量池中。</li></ul><h3 id="intern-方法" tabindex="-1"><a class="header-anchor" href="#intern-方法"><span>intern()方法</span></a></h3><p><strong>定义：</strong></p><p><code>intern() </code> 方法是 <code>java.lang.String </code> 类中的一个方法，用于管理字符串常量池（String Intern Pool）。它的主要作用是确保在Java应用程序中，对于相同内容的字符串只保留一份副本，并返回该副本的引用。具体来说， <code>intern() </code> 方法的行为如下：</p><ol><li><strong>检查字符串常量池</strong> ：当调用 <code>String.intern() </code> 时，JVM会首先检查字符串常量池中是否已经存在一个与调用 <code>intern() </code> 的字符串内容相同的字符串。</li><li><strong>返回现有实例或添加新实例</strong> ： <ul><li>如果存在，则直接返回字符串常量池中已有字符串的引用。</li><li>如果不存在，则将当前字符串添加到字符串常量池中，并返回这个新添加的字符串的引用。</li></ul></li><li><strong>性能和内存优化</strong> ：通过这种方式， <code>intern() </code> 可以减少内存使用，尤其是在程序中有大量重复字符串的情况下。此外，由于比较两个字符串是否相等只需要比较它们的引用，这可以提高字符串比较的速度。</li><li><strong>编译期和运行期的区别</strong> ：需要注意的是，通过双引号定义的字符串字面量（例如 <code>&quot;hello&quot; </code> ）在编译时会被自动加入字符串常量池，而通过 <code>new String(&quot;hello&quot;) </code> 创建的字符串则不会自动进入常量池，除非显式调用了 <code>intern() </code> 方法。</li></ol><p>jdk6版本中intern()方法会把第一次遇到的字符串实例复制到永久代的<strong>字符串常量池</strong>中，返回的也是永久代里面这个字符串实例的引用，jvm启动时就会把”java“加入到常量池中。</p><figure><img src="'+J+'" alt="结果：false,false" tabindex="0" loading="lazy"><figcaption>结果：false,false</figcaption></figure><p>JDK7及之后版本中由于字符串常量池在堆上，所以intern () 方法会把第一次遇到的字符串的引用放入字符串常量池。</p><figure><img src="'+j+'" alt=" " tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h4><ul><li><strong>性能考虑</strong> ：虽然 <code>intern() </code> 可以节省内存并加速字符串比较，但它也可能会增加垃圾回收的压力，特别是在大量使用 <code>intern() </code> 的情况下。因此，在使用 <code>intern() </code> 时需要权衡利弊。</li><li><strong>版本差异</strong> ：在JDK 6及之前版本中，所有通过 <code>intern() </code> 方法添加到字符串常量池的字符串都被存储在永久代（PermGen）中；从JDK 7开始，字符串常量池被移到了Java堆中，从而减少了对永久代空间的需求，并且允许更灵活地管理这些字符串的生命周期。</li></ul><h3 id="模拟方法区内存溢出" tabindex="-1"><a class="header-anchor" href="#模拟方法区内存溢出"><span>模拟方法区内存溢出：</span></a></h3><p>通过ByteBuddy框架，动态生成字节码数据，加载到内存中。通过死循环不停地加载到方法区，观察方法区是否出现内存溢出的情况：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;net.bytebuddy&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;byte-buddy&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;1.12.23&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Demo1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ClassLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Demo1</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> demo1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Demo1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Class&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> count;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            ClassWriter</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> writer</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ClassWriter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            //第一个参数是Jdk版本，我的是11，显然11时方法区在元空间中，不会发生</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            //但是可以设置方法区的最大内存上线，实现元空间内存溢出</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            writer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">visit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Opcodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">V11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Opcodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ACC_PUBLIC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,name,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java/lang/Object&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">            byte</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">byteArray</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> writer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toByteArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            demo1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">defineClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name,byteArray,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">byteArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(++count);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="直接内存" tabindex="-1"><a class="header-anchor" href="#直接内存"><span>直接内存：</span></a></h2><p>直接内存（Direct Memory）并不在《Java虚拟机规范》中存在，所以并不属于Java运行时的内存区域。</p><p>在 JDK 1.4 中引入了 NIO 机制，使用了直接内存，主要为了解决以下两个问题:</p><p>1，Java堆中的对象如果不再使用要回收，回收时会影响对象的创建和使用。</p><p>2，IO操作比如读文件，需要先把文件读入直接内存（缓冲区）再把数据复制到Java堆中。</p><p>3，在jdk8之后可用来保存方法区中的数据。</p><p>直接内存（Direct Memory）是Java应用程序可以使用的、位于JVM堆外的内存区域。它允许程序直接与操作系统交互，而不经过JVM的垃圾回收机制。直接内存的主要特点和用途如下：</p><h3 id="主要特点" tabindex="-1"><a class="header-anchor" href="#主要特点"><span>主要特点</span></a></h3><ol><li><strong>非堆内存</strong> ： <ul><li>直接内存不属于JVM管理的堆空间，因此它的分配和释放不会影响JVM的垃圾收集器。</li></ul></li><li><strong>高效I/O操作</strong> ： <ul><li>对于某些类型的I/O操作（如文件或网络I/O），使用直接内存在性能上可能更优。因为数据可以直接在本地内存和硬件设备之间传输，减少了数据复制的成本。</li></ul></li><li><strong>减少GC压力</strong> ： <ul><li>由于直接内存不在JVM堆中，大量使用直接内存的对象不会增加GC的负担，从而减少GC暂停时间。</li></ul></li><li><strong>资源管理责任</strong> ： <ul><li>开发者需要手动管理直接内存的生命周期。如果管理不当，可能会导致内存泄漏或其他问题。</li></ul></li><li><strong>不受-Xmx限制</strong> ： <ul><li>直接内存的大小不由JVM堆的最大值（ <code>-Xmx </code> ）控制，而是受限于操作系统的可用内存及配置。</li></ul></li></ol><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><ul><li><strong>高性能网络编程</strong> ：例如NIO中的 <code>java.nio.ByteBuffer.allocateDirect() </code> 用于创建直接缓冲区。</li><li><strong>大数据处理</strong> ：当处理的数据量非常大时，使用直接内存可以避免JVM堆溢出。</li><li><strong>与本地代码交互</strong> ：通过JNI调用本地代码时，直接内存可以提高效率，因为它不需要在堆和本地内存之间复制数据。</li></ul><h3 id="要创建直接内存上的数据-可以使用bytebuffer" tabindex="-1"><a class="header-anchor" href="#要创建直接内存上的数据-可以使用bytebuffer"><span>要创建直接内存上的数据，可以使用ByteBuffer：</span></a></h3><p>⚫ 语法： ByteBuffer directBuffer = ByteBuffer.allocateDirect(size);</p><p>⚫ 注意事项： arthas的memory命令可以查看直接内存大小，属性名direct。</p><h3 id="如果需要手动调整直接内存的大小-可以使用-xx-maxdirectmemorysize-大小" tabindex="-1"><a class="header-anchor" href="#如果需要手动调整直接内存的大小-可以使用-xx-maxdirectmemorysize-大小"><span>如果需要手动调整直接内存的大小，可以使用-XX:MaxDirectMemorySize=大小</span></a></h3><p>单位k或K表示千字节，m或M表示兆字节，g或G表示千兆字节。默认不设置该参数情况下，JVM 自动选择 最</p><p>大分配的大小。</p><p>以下示例以不同的单位说明如何将 直接内存大小设置为 1024 KB：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">XX</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">MaxDirectMemorySize</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">1m </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">XX</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">MaxDirectMemorySize</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">1024k </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">XX</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">MaxDirectMemorySize</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1048576</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接内存内存溢出会报错：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> in thread </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;main&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">OutOfMemoryError</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Direct</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> buffer memory</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',186))])}]]),_=JSON.parse('{"path":"/zh/posts/JVM/3.html","title":"JVM的内存结构","lang":"zh-CN","frontmatter":{"title":"JVM的内存结构","icon":"pen-to-square","date":"2024-11-29T00:00:00.000Z","sticky":true,"category":["JVM"],"tag":["内存结构"],"star":true,"description":"Java虚拟机的内存结构","head":[["meta",{"property":"og:url","content":"https://lcyp.github.io/blog/zh/blog/zh/posts/JVM/3.html"}],["meta",{"property":"og:site_name","content":"𝖑𝖎𝖆𝖓𝖌𝖈𝖍𝖊𝖓𝖞𝖆𝖓𝖌\'𝖘 𝖇𝖑𝖔𝖌"}],["meta",{"property":"og:title","content":"JVM的内存结构"}],["meta",{"property":"og:description","content":"Java虚拟机的内存结构"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-02T08:09:55.000Z"}],["meta",{"property":"article:tag","content":"内存结构"}],["meta",{"property":"article:published_time","content":"2024-11-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-02T08:09:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM的内存结构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-29T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-02T08:09:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"梁晨阳\\",\\"url\\":\\"https://lcyp.github.io/blog/zh/\\"}]}"]]},"headers":[{"level":2,"title":"程序计数器(PC寄存器)","slug":"程序计数器-pc寄存器","link":"#程序计数器-pc寄存器","children":[{"level":3,"title":"1. 在硬件中的作用","slug":"_1-在硬件中的作用","link":"#_1-在硬件中的作用","children":[]},{"level":3,"title":"2. 在 Java 中的作用","slug":"_2-在-java-中的作用","link":"#_2-在-java-中的作用","children":[]},{"level":3,"title":"3. JVM 中的程序计数器的特性","slug":"_3-jvm-中的程序计数器的特性","link":"#_3-jvm-中的程序计数器的特性","children":[]},{"level":3,"title":"4. 在 JVM 栈中的作用","slug":"_4-在-jvm-栈中的作用","link":"#_4-在-jvm-栈中的作用","children":[]},{"level":3,"title":"5. 程序计数器与其他内存区域的关系","slug":"_5-程序计数器与其他内存区域的关系","link":"#_5-程序计数器与其他内存区域的关系","children":[]},{"level":3,"title":"6. 程序计数器的特点","slug":"_6-程序计数器的特点","link":"#_6-程序计数器的特点","children":[]},{"level":3,"title":"7. 总结","slug":"_7-总结","link":"#_7-总结","children":[]}]},{"level":2,"title":"程序计数器在运行中会出现内存溢出吗？","slug":"程序计数器在运行中会出现内存溢出吗","link":"#程序计数器在运行中会出现内存溢出吗","children":[]},{"level":2,"title":"栈","slug":"栈","link":"#栈","children":[{"level":3,"title":"局部变量表：","slug":"局部变量表","link":"#局部变量表","children":[]},{"level":3,"title":"操作数栈：","slug":"操作数栈","link":"#操作数栈","children":[]},{"level":3,"title":"帧数据：","slug":"帧数据","link":"#帧数据","children":[]},{"level":3,"title":"栈内存溢出","slug":"栈内存溢出","link":"#栈内存溢出","children":[]},{"level":3,"title":"本地方法栈","slug":"本地方法栈","link":"#本地方法栈","children":[]}]},{"level":2,"title":"堆","slug":"堆","link":"#堆","children":[{"level":3,"title":"Arthas查看堆内存的大小：","slug":"arthas查看堆内存的大小","link":"#arthas查看堆内存的大小","children":[]},{"level":3,"title":"设置堆的大小：","slug":"设置堆的大小","link":"#设置堆的大小","children":[]}]},{"level":2,"title":"方法区","slug":"方法区","link":"#方法区","children":[{"level":3,"title":"1，类的元信息：","slug":"_1-类的元信息","link":"#_1-类的元信息","children":[]},{"level":3,"title":"2，运行时常量池：","slug":"_2-运行时常量池","link":"#_2-运行时常量池","children":[]},{"level":3,"title":"3，字符串常量池：","slug":"_3-字符串常量池","link":"#_3-字符串常量池","children":[]},{"level":3,"title":"intern()方法","slug":"intern-方法","link":"#intern-方法","children":[]},{"level":3,"title":"模拟方法区内存溢出：","slug":"模拟方法区内存溢出","link":"#模拟方法区内存溢出","children":[]}]},{"level":2,"title":"直接内存：","slug":"直接内存","link":"#直接内存","children":[{"level":3,"title":"主要特点","slug":"主要特点","link":"#主要特点","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":3,"title":"要创建直接内存上的数据，可以使用ByteBuffer：","slug":"要创建直接内存上的数据-可以使用bytebuffer","link":"#要创建直接内存上的数据-可以使用bytebuffer","children":[]},{"level":3,"title":"如果需要手动调整直接内存的大小，可以使用-XX:MaxDirectMemorySize=大小","slug":"如果需要手动调整直接内存的大小-可以使用-xx-maxdirectmemorysize-大小","link":"#如果需要手动调整直接内存的大小-可以使用-xx-maxdirectmemorysize-大小","children":[]}]}],"git":{"createdTime":1731560569000,"updatedTime":1735805395000,"contributors":[{"name":"lcyp","email":"2089117474@qq.com","commits":3},{"name":"lcy","email":"2089117474@qq.com","commits":2}]},"readingTime":{"minutes":20.77,"words":6232},"filePathRelative":"zh/posts/JVM/3.md","localizedDate":"2024年11月29日","excerpt":"<p>Java虚拟机的内存结构</p>\\n","autoDesc":true}')}}]);